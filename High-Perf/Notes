==================================
# High Performance Apps in Ionic #
==================================

# Section 1:
# ================================
# Understanding Browser Rendering

Basic Process = Javascript => Style => Layout => Paint => Composite

A high performing application should attempt to achieve 60 frames per second.
i.e. should carry out the above chain rendering a frame 60 times per second.

1. Javascript / CSS
The first step in the process is something that triggers a change.

2. Style
Stule sheets are processed to determine what styles are applied to each element.

3. Layout
Once style is determined it can work out how big elements are and where on the 
screen they should be.

4. Paint
Pixels are drawn on the screen

5. Composite
Ensures that elements that are layered are displayed in the correct order.
i.e. the item on top should be visible.

# How to Improve Broswer Rendering
  Aims:-
    1. Avoid as many of the steps above as possible.
    2. Make the work that needs to be done as efficient as possible.

Biggest win is to avoid the 'Layout' step wherever possible as everything on the
page needs to be recalculated.

Ideal step is to just trigger the composite step as this means just organising the
layers.

Max Lynch demonstrated the usefulness of CSS Containment using the:

  contain: layout;

css property on an element as it informs the page that the following element won't
affect the layout of other elements on the page. 

(Video) Debugging Ionic Applications When Deployed to an iOS Device: https://www.youtube.com/watch?v=9J8AxhDxtTE
(Video) Debugging Ionic Applications When Deployed to an Android Device: https://www.youtube.com/watch?v=Y1rD954ZyKA

# Section 2:
# ================================
# Creating Production Builds

Production builds perform a number of extra steps that can create upto a 3x decrease
in app boot time.

- ngc performs AOT compilation which means the javascript is pre-compiled allowing 
the browser to do less work.

- optimization performs tree-shaking. This means dead-code can be removed from the #
application.

- cleancss and uglifyjs perform optimisations and minification on your css and js.

# Section 3:
# ================================
# Measuring Network Requests

You ought to test the performance on the proper platforms, across different devices.

Green indicates time to first byte. 
Blue is download time.

Performance tab is better for seeing first paint. Also good for checking network 
performance.

Time to first paint can be affected alot by the amount of work the script has to do
creating elements.

It can be good to use lazy-loading with pre-loading which allows you to preload 
lazy-loaded pages in the background.

# Debugging Network Requests

When debugging network requests you should always have disable cache clicked in 
order to force the application to reload resources properly.

Throttling and Offline allows you to simulate different network types.

Key performance things to improve:-
  1. Time to First Meaningful Paint (TTFMP) and
  2. Time to Interactive (TTI)

Lazy-Loading Options:
  1. Load entire application
  2. Load Root page and lazy load other pages when they are accessed.
  3. Only load root page, then preload unused pages right away.

# Remove Unnecessary Files and Optimise Large Files
 - Run images through an optimisation program such as TinyPNG (reduce file size by 80%)

Ensure that your css files and js files are being bundled into your main files,
and not being loaded separately, unminified.

# Section 3:
# ================================
# Measuring and Debugging Memory Usage

To measure memory you can use the performane tab in devtools but ensure you tick
the memory usage checkbox so memory is being monitored. Make sure you collect 
garbage first so that you are starting from a clean slate.

Rise and fall is ideal, as it means the garbage collector is working.

Primary thing of interest is the JS Heap.

Lots of DOM elements can  cause a slow down also.

Key rules to avoid memory issues:
1. Unsubscribe from observables if they are no longer needed.
2. If you do add your own event listeners, make sure to remove them when they are no
  longer needed.
3. Avoid breaking the rules by doing things like storing global variables on the 
  window object. You should never need to do this, but if you do it, be very careful (that's a perfect situation for creating memory leaks.);
4. Unlike pages, providers persist throughout the life of an application, so make 
  sure they are not hogging up memory.
5. Make sure to clear any setIntervals you use once you are done with them, even if 
  they are not doing anything.
6. Be wary of growing memory usage, like in situations with an infinitely growing 
  list of data.

# Section 4:
# ================================
# Debugging Framerate issues

Should aim for 60fps. = 1 frame every 0.01666666 seconds.

Should focus on the frames section of performance time.

You should animate specific properties, which don't affect other elements on the 
page. You don't want to trigger calculation on the layout.

It is difficult to create performant animations in web apps but it's not 
impossible.

It can be both css and long-running scripts that cause low frame-rate.

Tips from this article: 
https://www.sitepoint.com/introduction-to-hardware-acceleration-css-animations/
  - By creating composite layers elements (using transforms) we can force the GPU
    into moving an item around the page which avoids triggeruing layout changes.
  - When does the browser create a separate composite layer?
    - For 3D perspective CSS transforms (in our example)
    - For <video> and <canvas> elements.
    - For an element that overlaps another element extracted to a composite layer
    (e.g. using z-index);
  - Only the following CSS property changes on elements can be handled on the GPU
    - transform
    - opacity
    - filter
  - By giving an element a transform property initially, we force the browser to
    add the element to the GPU.
  - Use Hardware Acceleration with Caution
    - Loading too meany textures to the GPU may cause memory issues. More critical
    on mobile devices.
  - (Not supported in Edge yet) - tells browser to use GPU 
    .example {
      will-change: transform;
    } 
  - Else can use the transform hack:
    .cube {
      -webkit-transform: translateZ(0);
      -moz-transform: translateZ(0);
      -ms-transform: translateZ(0);
      -o-transform: translateZ(0);
      transform: translateZ(0);
      /* Other transform properties here */
    }

  - if flickering present in Chrome and Safari, following declarations can fix
    the issue:
    .cube {
      -webkit-backface-visibility: hidden;
      -moz-backface-visibility: hidden;
      -ms-backface-visibility: hidden;
      backface-visibility: hidden;

      -webkit-perspective: 1000;
      -moz-perspective: 1000;
      -ms-perspective: 1000;
      perspective: 1000;
      /* Other transform properties here */
    }

    or instead of the above, this also works:
    .cube {
      -webkit-transform: translate3d(0, 0, 0);
      -moz-transform: translate3d(0, 0, 0);
      -ms-transform: translate3d(0, 0, 0);
      transform: translate3d(0, 0, 0);
      /* Other transform properties here */
    }

  - Be careful with each of these methods and only use them if you experience a 
    true performance win. Using the GPU unnecessarily can cause significant 
    performance issues because it increases memory use –– it will also affect the 
    battery life on mobile devices.

  Main points from module:
    - Avoid writing Javascript that triggers a 'Layout' whenever possible, or at least    
      optimise this.
    - Avoid using CSS that is going to trigger layouts
    - Keep your CSS as small and simple as possible

# Section 5:
# ================================
# Bundle Size and Lazy Loading

The goal here is to get our application booting as quickly as possible, which means 
optimising those initial network requests that are required to get to our 'First Meaningful
Paint' and the 'Time to Interactive'.

To investigate the parts of our app that take the most space we can use the
'source map explorer'.

  npm install -g source-map-explorer

To use the source-map-explorer you can use:

source-map-expolorer www/build/main.js www/build/main.js.map

You can also run the command to the vendor file that is created.

You should review these files to find opportunites to remove unused, or large libraries,
for potentially smaller alternatives.

Lazy Loading has three options:
  1. Load entire application
  2. Load Root page and lazy load other pages when they are accessed.
  3. Only load root page, then preload unused pages right away.

To add a preloading strategy use the following option to the main app.module.ts

  @NgModule({
    declarations: [
      MyApp
    ],
    imports: [
      BrowserModule,
      IonicModule.forRoot(MyApp, {
        preloadModules: true
      })
    ],
    bootstrap: [IonicApp],
    entryComponents: [
      MyApp
    ]
  })
  export class AppModule { }

You can also identify priority pages to load first by using the priority property in
the IonicPage definition.

  @IonicPage({
    priority: 'high'
  })

other options are:
  'low' - which is the default or,
  'off' - which means the module will be loaded when it's accessed.

# Section 6:
# ================================
# Interacting with the DOM Efficiently

  How to avoid 'DOM Thrashing'
  Dom thrashing is caused by layout changes on rapid fire.

  We should avoid a 'Forced Synchronous Layout'.
  This occers when we do reads and writes from the DOM in quick succession.

  Scrolling Lists often cause DOM Thrashing as they fire off lots of sychronous layouts in 
  quick succession.

# Using DOMController to Manage Writes.
Ionic provides a controller to help manage DOM read and writes to help prevent DOM 
Thrashing.
 e.g. 
  import { DoMController } from 'ionic-angular';
  ...
  constructor(private domCtrl: ComController ) { }
  ...
  this.domCtrl.write(() => {
    // do writes
  });
  ...
  this.domCtrl.read(() => {
    // do reads
  });

ionScroll provides a scroll event which allows you to trigger a method called domWrite.


# Section 7:
# ================================
# Perceived Performance

Application design can improve or worsen the perceived perfomance of an application.

To make an application feel faster, one should provide feedback to a user interaction as
quickly as possible. A response should be within 80ms in order for it to feel performant.

A good thing to do is to perform operations like the following:
1. Click the page button
2. Immediately navigate to the new page
3. Display a loading indicator where the content needs to be loaded in, or if 
  necessary an entire screen loading overlay
4. Perform the necessary loading
5. Remove the loading indicator

You can also provide loading bars or skeleton cards to make a page feel more 
performant.


# Section 8:
# ================================
# Dealing With Large Lists

Large lists on a mobile can always be difficult.

three things you can do to help deal with any issues is to:
  - Simplify the list items to reduce strain on the browser rendering process.
  - User ionic's VirtualScroll to "recycle" DOM elements as the list is scrolled
  - Use an infinite scroll approach to load list items as they are required.

ionic allows us to use the [virtualScroll] directives to reuse DOM elements instead
of having to render everything in the list. One requirement for virtualScroll is to
supply an approxItemHeight attribute on the list. Additionally, once the data for 
the list is set, it should not change.

To use infinite-scroll in ionic we can utilise the infinite scroll component.

e.g.
    <ion-infinite-scroll (ionInfinite)="doInfinite($event)">
        <ion-infinite-scroll-content></ion-infinite-scroll-content>
    </ion-infinite-scroll>

If a user infinitely scrolls we might need to consider adding a point at which
the elements at the beginning of the list are removed.

# Section 9:
# ================================
# Animation Performance

As touched on earlier, animation performance is affected a lot by the css properties
used to animate an object. The key point is to avoid triggering a new layout as this
causes significant work fro the browser.

Triggering paint is not quite as bad. Which means we can change properties like, 
color, background-color and box-shadow.

Properties that only trigger the composite step are the best to animate. Properties
such as opacity, transforms and filters are perfect for this.

# Section 10:
# ================================
# Speeding Up Observables and Promises

It's easy to negatively affect the performance of our application by misusing 
Promises of observables.

Making use of Promise.all() when we are able to is useful.
Observable.forkJoin() is the equivalent for obseravables.

Generally, it's easier to re-engineer an API so that you can avoid, dependent 
promises and observables, to avoid needing to make mutliple sequential calls
to a back-end.

# Section 11:
# ================================
# Using Web Workers for Heavy Lifting

We can create web workers to do specific scripting calculations etc. To do this
we need to create additional JS files that aren't bundles into our application.

We then create a worker using this function and from it we can pass data back and
forth using messages.

e.g => Web Worker in 'src/assets/js/doSort.js'
  self.addEventListener('message', function(e){

      var randomArray = [];
      var length = e.data;

      for(var i=0; i<length; i++){
          randomArray.push(Math.random());
      }

      var sortedArray = randomArray.sort();

      self.postMessage(sortedArray);

  }, false);

Interaction with main app =>
  doSortWithWorker(){

    this.sortWorker = new Worker('../assets/js/doSort.js');

    this.sortWorker.addEventListener('message', (e) => {
        console.log("done!");
        //console.log(e.data);
    }, false);

    this.sortWorker.postMessage(1000000);

  }

Using profiling and identifying work that can be offloaded to a web worker can
help create a smoother, more performant feeling application.